.. _hello_world:

.. toctree::
   :maxdepth: 2

Hello World
===========

In this example, we are going to run a very simple SYCL kernel on a SYCL device
on your system using the SYCL programming model.
Previous device discovery example didn't execute anything on a SYCL device
as it was just querying about the available SYCL platforms and the SYCL devices.

Remember from our earlier discussion that we need to submit SYCL kernels into a
SYCL queue.
SYCL provides several constructors to create customized queues.
Below is an incomplete list of the constructors available for the ``sycl::queue``
class (copy pasted from the Intel oneAPI implementation of the SYCL standard):

.. code:: c++

  /// Constructs a SYCL queue instance using the device returned by an instance
  ///
  /// of default_selector.
  /// PropList is a list of properties for queue construction.
  queue(const property_list &PropList = {});

  /// Constructs a SYCL queue instance with an async_handler using the device
  /// returned by an instance of default_selector.
  ///
  /// AsyncHandler is a SYCL asynchronous exception handler.
  /// PropList is a list of properties for queue construction.
  queue(const async_handler &AsyncHandler, const property_list &PropList = {});
