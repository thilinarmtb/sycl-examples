.. _hello_world:

.. toctree::
   :maxdepth: 2

Hello World
===========

In this example, we are going to run a very simple SYCL kernel on a SYCL device
on your system using the SYCL programming model.
Previous device discovery example didn't execute anything on a SYCL device
as it was just querying about the available SYCL platforms and the SYCL devices.

Remember from our earlier discussion that we need to submit SYCL kernels into a
SYCL queue.
SYCL provides several constructors to create customized queues.
Below is one of the constructors available for the ``sycl::queue``
class (copy pasted from the Intel oneAPI implementation of the SYCL standard):

.. code:: c++

  queue(const property_list &prop_list = {});

Here ``prop_list`` is a list of properties used for the queue construction.
Below is a list of all the properties supported by the Intel oneAPI compiler.
The properties under the ``sycl::ext::oneapi::`` namespace are intel oneAPI
extensions.

.. csv-table::
   :widths: auto
   :header-rows: 1
   :delim: ,

   namespace, property
   property::queue, in_order
   property::queue, enable_profiling
   ext::oneapi::property::queue, discard_events
   ext::oneapi::property::queue, priority_normal
   ext::oneapi::property::queue, priority_low
   ext::oneapi::property::queue, priority_high
   ext::intel::property::queue, no_immediate_command_list
   ext::intel::property::queue, immediate_command_list
   ext::oneapi::cuda::property::queue, use_default_stream
