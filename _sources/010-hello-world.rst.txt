.. _hello_world:

.. toctree::
   :maxdepth: 2

Hello World
===========

In this example, we are going to run a very simple SYCL kernel on a SYCL device
available on our system using the SYCL programming model.
Previous device discovery program didn't execute anything on a SYCL device
as it was just querying about the available SYCL platforms and the SYCL devices
belonging to them (remember from our earlier discussion that we need to submit SYCL
kernels into a SYCL queue).

SYCL provides an extensive API to create queues with the desired properties.
Below is an incomplete list of the constructors provided for the ``sycl::queue``
class (quoted from the Intel oneAPI implementation of the SYCL standard):

.. code:: c++

  /// Constructs a SYCL queue instance using the device returned by an instance
  ///
  /// of default_selector.
  /// PropList is a list of properties for queue construction.
  queue(const property_list &PropList = {});

  /// Constructs a SYCL queue instance with an async_handler using the device
  /// returned by an instance of default_selector.
  ///
  /// AsyncHandler is a SYCL asynchronous exception handler.
  /// PropList is a list of properties for queue construction.
  queue(const async_handler &AsyncHandler, const property_list &PropList = {});

  /// Constructs a SYCL queue instance using the device identified by the
  /// device selector provided.
  ///
  /// \param DeviceSelector is SYCL 2020 Device Selector, a simple callable that
  /// takes a device and returns an int
  /// \param AsyncHandler is a SYCL asynchronous exception handler.
  /// \param PropList is a list of properties for queue construction.
  template <typename DeviceSelector,
            typename =
                detail::EnableIfSYCL2020DeviceSelectorInvocable<DeviceSelector>>
  explicit queue(const DeviceSelector &deviceSelector,
                 const async_handler &AsyncHandler,
                 const property_list &PropList = {})
      : queue(detail::select_device(deviceSelector), AsyncHandler, PropList) {}
